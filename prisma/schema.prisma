datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

// auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

// users

model DiscordUser {
  id String @id

  // settings
  pingMessages PingMessage[]
}

model PingMessage {
  user    DiscordUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  message String

  @@id([userId, guildId])
}

// guilds
model Guild {
  id String @id

  // -- SETTINGS --
  // util
  prefix          String       @default("!")
  // channel list
  channelListMode ListMode     @default(Blacklist)
  channelList     String[]
  // guild board
  boards          GuildBoard[]

  // --
  // references
  pingMessages PingMessage[]
  settings     GuildSetting[]
}

model GuildSetting {
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  name      String
  type      SettingType
  value     Json // { value: any }
  arrayType Boolean     @default(false)

  @@id([guildId, name])
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  CHANNEL
  ROLE
  USER
}

model GuildBoard {
  id      Int    @id @default(autoincrement())
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  channelId    String
  emoji        String
  minReactions Int    @default(2)

  messages GuildBoardMessage[]
}

model GuildBoardMessage {
  reactedMessageId String
  messageId        String
  reactedChannelId String
  channelId        String

  board   GuildBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int

  @@id([reactedMessageId, reactedChannelId])
}

// common
enum ListMode {
  Blacklist
  Whitelist
}
