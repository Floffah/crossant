datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

// users

model User {
  id String @id

  // opted in to
  optWordCount Boolean @default(false)

  // settings
  pingMessages PingMessage[]
}

model PingMessage {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  message String

  @@id([userId, guildId])
}

// guilds
model Guild {
  id String @id

  // -- SETTINGS --
  // util
  prefix          String       @default("!")
  // channel list
  channelListMode ListMode     @default(Blacklist)
  channelList     String[]
  // guild board
  boards          GuildBoard[]

  // --
  // references
  pingMessages PingMessage[]
}

model GuildBoard {
  id      Int    @id @default(autoincrement())
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  channelId String
  emoji     String

  messages GuildBoardMessage[]
}

model GuildBoardMessage {
  reactedMessageId String
  messageId        String
  reactedChannelId String
  channelId        String

  board   GuildBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int

  @@id([reactedMessageId, reactedChannelId])
}

// common
enum ListMode {
  Blacklist
  Whitelist
}
